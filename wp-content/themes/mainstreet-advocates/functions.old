<?php
/**
 * MainStreet Advocates functions and definitions
 *
 * @link https://developer.wordpress.org/themes/basics/theme-functions/
 *
 * @package MainStreet_Advocates
 */

if ( ! function_exists( 'mainstreet_advocates_setup' ) ) :
	/**
	 * Sets up theme defaults and registers support for various WordPress features.
	 *
	 * Note that this function is hooked into the after_setup_theme hook, which
	 * runs before the init hook. The init hook is too late for some features, such
	 * as indicating support for post thumbnails.
	 */
	function mainstreet_advocates_setup() {
		/*
		 * Make theme available for translation.
		 * Translations can be filed in the /languages/ directory.
		 * If you're building a theme based on MainStreet Advocates, use a find and replace
		 * to change 'mainstreet-advocates' to the name of your theme in all the template files.
		 */
		load_theme_textdomain( 'mainstreet-advocates', get_template_directory() . '/languages' );

		// Add default posts and comments RSS feed links to head.
		add_theme_support( 'automatic-feed-links' );

		/*
		 * Let WordPress manage the document title.
		 * By adding theme support, we declare that this theme does not use a
		 * hard-coded <title> tag in the document head, and expect WordPress to
		 * provide it for us.
		 */
		add_theme_support( 'title-tag' );

		/*
		 * Enable support for Post Thumbnails on posts and pages.
		 *
		 * @link https://developer.wordpress.org/themes/functionality/featured-images-post-thumbnails/
		 */
		add_theme_support( 'post-thumbnails' );

		// This theme uses wp_nav_menu() in one location.
		register_nav_menus( array(
			'menu-1' => esc_html__( 'Primary', 'mainstreet-advocates' ),
		) );

		/*
		 * Switch default core markup for search form, comment form, and comments
		 * to output valid HTML5.
		 */
		add_theme_support( 'html5', array(
			'search-form',
			'comment-form',
			'comment-list',
			'gallery',
			'caption',
		) );

		// Set up the WordPress core custom background feature.
		add_theme_support( 'custom-background', apply_filters( 'mainstreet_advocates_custom_background_args', array(
			'default-color' => 'ffffff',
			'default-image' => '',
		) ) );

		// Add theme support for selective refresh for widgets.
		add_theme_support( 'customize-selective-refresh-widgets' );

		/**
		 * Add support for core custom logo.
		 *
		 * @link https://codex.wordpress.org/Theme_Logo
		 */
		add_theme_support( 'custom-logo', array(
			'height'      => 250,
			'width'       => 250,
			'flex-width'  => true,
			'flex-height' => true,
		) );
	}
endif;
add_action( 'after_setup_theme', 'mainstreet_advocates_setup' );

/**
 * Set the content width in pixels, based on the theme's design and stylesheet.
 *
 * Priority 0 to make it available to lower priority callbacks.
 *
 * @global int $content_width
 */
function mainstreet_advocates_content_width() {
	// This variable is intended to be overruled from themes.
	// Open WPCS issue: {@link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/1043}.
	// phpcs:ignore WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedVariableFound
	$GLOBALS['content_width'] = apply_filters( 'mainstreet_advocates_content_width', 640 );
}

add_action( 'after_setup_theme', 'mainstreet_advocates_content_width', 0 );

/**
 * Register widget area.
 *
 * @link https://developer.wordpress.org/themes/functionality/sidebars/#registering-a-sidebar
 */
function mainstreet_advocates_widgets_init() {
	register_sidebar( array(
		'name'          => esc_html__( 'Sidebar', 'mainstreet-advocates' ),
		'id'            => 'sidebar-1',
		'description'   => esc_html__( 'Add widgets here.', 'mainstreet-advocates' ),
		'before_widget' => '<section id="%1$s" class="widget %2$s">',
		'after_widget'  => '</section>',
		'before_title'  => '<h2 class="widget-title">',
		'after_title'   => '</h2>',
	) );
}

add_action( 'widgets_init', 'mainstreet_advocates_widgets_init' );

/**
 * Enqueue scripts and styles.
 */
function mainstreet_advocates_scripts() {
	wp_enqueue_style( 'mainstreet-advocates-style', get_stylesheet_uri() );

	wp_enqueue_script( 'mainstreet-advocates-navigation', get_template_directory_uri() . '/js/navigation.js', array(), '20151215', true );

	wp_enqueue_script( 'mainstreet-advocates-skip-link-focus-fix', get_template_directory_uri() . '/js/skip-link-focus-fix.js', array(), '20151215', true );

	if ( is_singular() && comments_open() && get_option( 'thread_comments' ) ) {
		wp_enqueue_script( 'comment-reply' );
	}
}

add_action( 'wp_enqueue_scripts', 'mainstreet_advocates_scripts' );

/**
 * Implement the Custom Header feature.
 */
require get_template_directory() . '/inc/custom-header.php';

/**
 * Custom template tags for this theme.
 */
require get_template_directory() . '/inc/template-tags.php';

/**
 * Functions which enhance the theme by hooking into WordPress.
 */
require get_template_directory() . '/inc/template-functions.php';

/**
 * Customizer additions.
 */
require get_template_directory() . '/inc/customizer.php';

/**
 * Load Jetpack compatibility file.
 */
if ( defined( 'JETPACK__VERSION' ) ) {
	require get_template_directory() . '/inc/jetpack.php';
}

/**
 * Addding Custom style and javascripts dependencies
 */

//Load styles
function theme_styles() {
	wp_enqueue_style( 'bootstrap_css', get_template_directory_uri() . '/css/bootstrap.min.css' );
	wp_enqueue_style( 'fontawesome_all_css', 'https://use.fontawesome.com/releases/v5.3.1/css/all.css' );
	wp_enqueue_style( 'main_css', get_template_directory_uri() . '/css/style.css' );
	wp_enqueue_style( 'datatables_css', get_template_directory_uri() . '/DataTables/datatables.min.css' );
	wp_enqueue_style( 'select2', get_template_directory_uri() . '/css/select2.min.css' );
	wp_enqueue_style( 'fancybox', '//cdnjs.cloudflare.com/ajax/libs/fancybox/2.1.5/jquery.fancybox.css' );
	wp_enqueue_style( 'export', 'https://www.amcharts.com/lib/3/plugins/export/export.css' );
}

add_action( 'wp_enqueue_scripts', 'theme_styles' );

//Load jscripts
function theme_js() {

	global $wp_scripts;
	wp_enqueue_script( 'jquery_js', get_template_directory_uri() . '/js/jquery.js' );
	wp_enqueue_script( 'bootstrap_js', get_template_directory_uri() . '/js/bootstrap.min.js' );
	wp_enqueue_script( 'select2', get_template_directory_uri() . '/js/select2.min.js', true );
	wp_enqueue_script( 'datatable_js', get_template_directory_uri() . '/DataTables/datatables.min.js' );
	wp_enqueue_script( 'amchart', get_template_directory_uri() . '/js/ammap.js', true );
	wp_enqueue_script( 'fancybox', get_template_directory_uri() . '/js/jquery.fancybox.min.js', true );
	//wp_enqueue_script( 'usaLow', get_template_directory_uri() . '/js/usaLow.js' ,true);
	wp_enqueue_script( 'light', get_template_directory_uri() . '/js/light.js', true );
	wp_enqueue_script( 'export', get_template_directory_uri() . '/js/export.min.js', true );

}

add_action( 'wp_enqueue_scripts', 'theme_js' );

//// include custom jQuery
//function shapeSpace_include_custom_jquery() {
//
//	wp_deregister_script('jquery');
//	wp_enqueue_script('jquery', 'https://code.jquery.com/jquery-3.3.1.min.js', array(), null, true);
//
//}
//add_action('wp_enqueue_scripts', 'shapeSpace_include_custom_jquery');

//function my_theme_scripts() {
//    wp_enqueue_script( 'my-great-script', get_template_directory_uri() . '/js/my-great-script.js', array( 'jquery' ), '1.0.0', true );
//}
//add_action( 'wp_enqueue_scripts', 'my_theme_scripts' );

/**
 * Addding Company info to user data
 */

function custom_user_profile_fields( $user ) {

	global $wpdb;
	$clients       = "SELECT id,client FROM `user_clients`";
	$client_result = $wpdb->get_results( $clients, ARRAY_A );

	$json   = file_get_contents( get_site_url() . '/wp-content/themes/mainstreet-advocates/states.json' );
	$states = json_decode( $json );

	$default       = esc_attr( get_the_author_meta( 'company', $user->ID ) );
	$default_state = esc_attr( get_the_author_meta( 'state', $user->ID ) );

	?>
    <h3>Additional profile information</h3>
    <table class="form-table">
        <tr>
            <th><label for="company">Company Name</label></th>
            <td>
                <select class="regular-text" id="company" name="company">
					<?php if ( strlen( $default ) == 0 ) { ?>
                        <option value="" selected disabled>Select a company</option>
					<?php }
					foreach ( $client_result as $client ) {
						if ( $client["id"] === $default ) { ?>
                            <option value="<?php echo $client["id"] ?>"
                                    selected><?php echo $client["client"] ?></option>
						<?php } else { ?>
                            <option value="<?php echo $client["id"] ?>"><?php echo $client["client"] ?></option>
						<?php }
					} ?>

                </select>
            </td>
        </tr>
        <tr>
            <th><label for="company">State</label></th>
            <td>
                <select class="regular-text" id="state" name="state">
					<?php if ( strlen( $default_state ) > 0 ) { ?>
                        <option value="<?php echo $default_state ?>" selected><?php echo $default_state ?></option>
					<?php } else { ?>
                        <option value="" selected disabled>Select a state</option>
					<?php }
					foreach ( $states as $state ) { ?>
                        <option value="<?php echo $state->abbreviation; ?>"><?php echo $state->abbreviation; ?></option>
					<?php } ?>
                </select>
            </td>
        </tr>
    </table>
	<?php
}

add_action( 'show_user_profile', 'custom_user_profile_fields' );
add_action( 'edit_user_profile', 'custom_user_profile_fields' );
add_action( "user_new_form", "custom_user_profile_fields" );

function save_custom_user_profile_fields( $user_id ) {
	global $wpdb;
	# again do this only if admin
	if ( ! current_user_can( 'manage_options' ) ) {
		return false;
	}

	// save my custom field
	// if company meta value changed then we should clean all records and update new ones e.g if user changed company
	// update_user_meta will return false if meta value is same is in database thats why we are doing true check
	if ( update_user_meta( $user_id, 'company', $_POST['company'] ) ) {
		$wpdb->query( "DELETE FROM user_settings WHERE user_id ={$user_id}" );
		$wpdb->query( $wpdb->prepare( "INSERT INTO user_settings (user_id,type,category,isfrontactive,ismailactive) SELECT %s,type,category,isfrontactive,ismailactive FROM client_settings  WHERE client_id = %s", $user_id, $_POST['company'] ) );

	}
	if ( isset( $_POST['state'] ) ) {
		update_user_meta( $user_id, 'state', $_POST['state'] );
	}
}

add_action( 'user_register', 'save_custom_user_profile_fields' );
add_action( 'profile_update', 'save_custom_user_profile_fields' );


function am_enqueue_admin_styles() {

	wp_register_style( 'am_admin_bootstrap', get_template_directory_uri() . '/css/bootstrap.min.css' );
	wp_enqueue_style( 'am_admin_bootstrap' );
	wp_enqueue_script( 'jquery_js', get_template_directory_uri() . '/js/jquery.js' );
}

add_action( 'admin_enqueue_scripts', 'am_enqueue_admin_styles' );

/*
add_action('admin_init', 'your_function');
function your_function(){
	add_settings_section(
		'eg_setting_section',
		__( 'Example settings section in reading', 'textdomain' ),
		'wpdocs_setting_section_callback_function',
		'general'
	);
/*add_settings_field(
	'diven',
	'För in mätarställningen här',
	'ac_add_field',
	'Anders-counter',
	'ac_div'
);
};
*/
// custom function  - returns profiles / categories matches function
function getCategoriesByID( $id ) {
	global $wpdb;
	$cat_query  = "SELECT pname FROM `profile_match` where entity_id = $id ";
	$categories = $wpdb->get_results( $cat_query, OBJECT );

	foreach ( $categories as $categorie ) {
		$name[] = $categorie->pname;
	}

	if ( $name !== null ) {
		return implode( ", ", $name );
	}
}

// custom function  - returns profiles / categories matches function
function getBillCategoriesByID( $id, $type, $output = 'string' ) {
	global $wpdb;
	$cat_query  = "SELECT pname FROM `profile_match` where entity_id = $id  AND entity_type = '{$type}'";
	$categories = $wpdb->get_results( $cat_query, OBJECT );

	foreach ( $categories as $categorie ) {
		$name[] = $categorie->pname;
	}

	if ( $name !== null ) {
		if ( $output === 'string' ) {
			return implode( ", ", $name );
		} else {
			return $name;
		}
	}
}

function getCategoriesByClient( $ent_name ) {
	global $wpdb;
	$ent_name = strtolower( $ent_name );
	//  $cat_query="SELECT pname FROM `profile_match` where client like '%$ent_name%' GROUP BY pname";
	$cat_query  = "SELECT pname FROM `profile_match` AS pm LEFT JOIN `user_clients` AS us ON pm.client_id = us.id where client like '%$ent_name%' GROUP BY pname";
	$categories = $wpdb->get_results( $cat_query, OBJECT );

	foreach ( $categories as $categorie ) {
		$name[] = $categorie->pname;
	}

	if ( $name !== null ) {
		return implode( ", ", $name );
	}
}

function getCategoriesByClient2( $ent_name ) {
	global $wpdb;
	$ent_name   = strtolower( $ent_name );
	$cat_query  = "SELECT * FROM `profile_match` where client like '%$ent_name%' GROUP BY pname";
	$categories = $wpdb->get_results( $cat_query, OBJECT );

	return $categories;

}

function userSettingsCategories( $user_id ) {
	global $wpdb;
	$categoies = $wpdb->get_results( "SELECT id,category FROM user_settings WHERE type = 'category' AND isfrontactive = 1 AND user_id = '$user_id'", OBJECT );

	return $categoies;
}

// custom function  - returns profiles / categories matches function
function getCategoriesByUser( $user_id ) {
	global $wpdb;
	$cat_query2 = "SELECT lfront FROM `user_profile` where user_id='$user_id' and lfront IS NOT NULL";

	$categories2 = $wpdb->get_results( $cat_query2, OBJECT );

	foreach ( $categories2 as $categorie2 ) {
		$name2[] = $categorie2->lfront;
	}

	if ( isset( $name2 ) and $name2 !== null ) {
		return implode( ", ", $name2 );
	}
}

// custom function  - returns keywords function
function getKeyword( $ent_id ) {
	global $wpdb;
	$key_query = "SELECT keyword FROM `profile_keyword` where profile_match_id = '$ent_id'";
	$keywords  = $wpdb->get_results( $key_query, OBJECT );

	foreach ( $keywords as $keyword ) {
		$key_name[] = $keyword->keyword;
	}

	if ( isset( $key_name ) && $key_name !== null ) {
		return implode( ", ", $key_name );
	}

}

/**
 * @param $id
 *
 * @return array|null|object|void
 */
function getProfileMatchPnameByID( $id ) {
	global $wpdb;
	$client_query = "SELECT pname FROM `profile_match` WHERE id = {$id}";
	$profilematch = $wpdb->get_row( $client_query, OBJECT );

	return $profilematch->pname;
}

function getClientSettings( $category, $type, $client_id ) {
	global $wpdb;
	$client_query = "SELECT id FROM `client_settings` WHERE client_id = {$client_id} AND type='{$type}' AND category = '{$category}'";
	$profilematch = $wpdb->get_row( $client_query, OBJECT );

	return $profilematch->id;
}

function updateUserSettings( $field, $type, $user_id ) {
	global $wpdb;
	$fields = explode( '_', stripslashes( $field ) );
	$id     = $fields[2];
	$group  = $fields[1];
	//$pname = getProfileMatchPnameByID($id);
	//update new settings
	$query  = "UPDATE `user_settings` SET `{$type}` = NOT `{$type}` WHERE id = '{$id}' AND user_id = {$user_id}";
	$result = $wpdb->query( "UPDATE `user_settings` SET `{$type}` = NOT `{$type}` WHERE id = '{$id}' AND user_id = {$user_id}" );

	$client_id = get_user_meta( get_current_user_id(), 'company', true );
	if ( $group === 'keyword' ) {
		$us_settings = $wpdb->get_results( "SELECT type,pname,profile_match_id FROM user_settings as us LEFT JOIN profile_keyword as pk ON us.category = pk.keyword LEFT JOIN profile_match as pm ON pk.profile_match_id = pm.id WHERE us.id = {$id} AND client_id = {$client_id}", OBJECT );
		// TODO refactor this!
		foreach ( $us_settings as $setting ) {
			if ( $setting->type === 'keyword' ) {
				$us_keywords = $wpdb->get_results( "SELECT * FROM user_settings WHERE category IN ( SELECT keyword FROM profile_match as pm LEFT JOIN profile_keyword as pk ON pm.id = pk.profile_match_id WHERE pm.id = {$setting->profile_match_id}) AND user_id = {$user_id}" );
				foreach ( $us_keywords as $us_keyword ) {
					if ( $us_keyword->isfrontactive === '0' || $us_keyword->ismailactive === '0' ) {
						echo $us_keyword->profile_match_id;
						$updatequery = "UPDATE user_settings as us,(SELECT * FROM profile_match WHERE id = {$setting->profile_match_id}) as pm SET `{$type}` = 0 WHERE category = pm.pname and user_id = {$user_id} and type = 'category'";
						$wpdb->query( $updatequery );
						break;
					}
				}
			}
		}
	}

}

/**
 * @param $field
 * @param $type
 * @param $client_id
 */
function updateprofileForClient( $field, $type, $client_id ) {
	global $wpdb;
	$fields = explode( '_', $field );
	$id     = $fields[2];
	$group  = $fields[1];
	//$pname = getProfileMatchPnameByID($id);
	$query  = "UPDATE `client_settings` SET `{$type}` = NOT `{$type}` WHERE id = '{$id}' AND client_id = {$client_id}";
	$result = $wpdb->query( $query );
}

// custom function  - returns keywords function
function getAllClients() {
	global $wpdb;
	$client_query = "SELECT id,client FROM user_clients";
	$client       = $wpdb->get_results( $client_query, OBJECT );

	return $client;
}

// custom function  - returns keywords function
function getCleint( $ent_id ) {
	global $wpdb;
	$client_query = "SELECT client FROM `profile_match` where entity_id = '$ent_id'";
	$client       = $wpdb->get_row( $client_query, OBJECT );


	return $client->client;
}

// custom function  - returns related documents function
function getRelatedBills( $ent_id ) {
	global $wpdb;
	$bill_query = "SELECT * FROM `related_bill` where legislation_id='$ent_id'";

	$bills = $wpdb->get_results( $bill_query, OBJECT );

	return $bills;

}

class MSABase {
	protected $wpdb;
	public $client_id;
	public $user_id;
	const HEARING = 'hearing';
	const LEGISLATION = 'legislation';
	const REGULATION = 'regulation';

	public function __construct() {
		global $wpdb;
		$this->wpdb = $wpdb;
	}

	/**
	 * base class for  dry
	 */
	public function getClientUsers( $client_id, array $fields ) {
		$users        = get_users( array(
			'meta_key'   => 'company',
			'meta_value' => $client_id
		) );
		$return_users = array();
		foreach ( $users as $user ) {
			foreach ( $fields as $field ) {
				$us[ $field ] = $user->{$field};
			}
			array_push( $return_users, $us );
		}

		return $return_users;
	}

	/**
	 * Returns list of admin or staff users
	 * @return array (object)
	 */
	protected function getStaffUsers() {
		$users = get_users( array(
			'role__in' => array( 'Administrator', 'Staff' )
		) );

		return $users;
	}

	/**
	 * check if user has setting for seeing bill : state, category
	 *
	 */
	protected function validateBillForUser( $user, $bill ) {

	}
}

class MSABill extends MSABase {
	/**
	 *
	 */
	public $categories = array();
	public $type;
	public $id;
	public $state;
	public $session;
	public $priority;
	public $notes = array();
	public $updated;
	public $approved;
	public $hidden;
	public $entity_type;

	public function __construct( $entity_type ) {
		parent::__construct();
		$this->entity_type = $entity_type;
	}

	public function getBill(){
		$bill = $this->wpdb->get_row( $this->wpdb->prepare(
			"SELECT * 
                    FROM regulation 
                    WHERE id = %s",
			$this->id),
			OBJECT );
		foreach ($bill as $key => $value){
		   $this->$key = $value;
        }

    }
	/*function getBillCategories( $id, $type, $output = 'string' ) {
		global $wpdb;
		$cat_query  = "SELECT pname FROM `profile_match` where entity_id = $id  AND entity_type = '{$type}'";
		$categories = $wpdb->get_results( $cat_query, OBJECT );

		foreach ( $categories as $categorie ) {
			$name[] = $categorie->pname;
		}

		if ( $name !== null ) {
			if ( $output === 'string' ) {
				return implode( ", ", $name );
			} else {
				return $name;
			}
		}
	}*/

	public function getNotesForBill() {
		$notes = $this->wpdb->get_results( $this->wpdb->prepare(
			"SELECT * FROM bill_notes
                    WHERE client_id = %s
                    AND entity_type = %s 
                    AND bill_id = %s",
			        $this->client_id,
                    $this->entity_type,
                    $this->id),
                    OBJECT);
		print_r($notes);
	}


	/**
	 * returns array of categories for bill
	 * @return void
	 */
	public function getBillCategories() {
		$categories = $this->wpdb->get_results( $this->wpdb->prepare(
			"SELECT pname 
                    FROM profile_match 
                    WHERE entity_id = %s
                    AND entity_type = %s 
                    AND client_id = %s",
			$this->id,
			$this->entity_type,
			$this->client_id ),
			OBJECT );
		foreach ( $categories as $category ) {
			$this->categories[] = $category->pname;
		}

	}

}

class MSANotes extends MSABase {
	private $note_timestamp;
	private $external_id;
	private $bill_url;
	private $note_text;
	private $user;
	/**
	 * Requirments:
	 * ·
	 * ·         It will filter the list checking for the bill's profiles (categories).
	 * -    If a user from list has any of the State/Categories/Profiles enabled in the dashboard, it will include the user in the notification email. If not will remove it.
	 */
	/**
	 * Notes constructor.
	 * User should be able to manage notes that is:
	 * -to be able to see all notes that belong to parent client
	 * -to be able to add,delete new note for particular bill
	 * Staff member should be able to manage notes that is to be able to do following:
	 * -
	 */
	public function __construct() {
		$this->user    = new MSAUser();
		$this->user_id = $this->user->user_id;

	}

	public function createRecipentsList() {
		$recipent_list = array();
		//It will get the list of users within the same client
		$client_users = $this->getClientUsers( $this->user->client_id, array( 'ID', 'user_email' ) );
		foreach ( $client_users as $client_user ) {
			// It will exclude the user performing the action (user that is adding note)
			if ( $this->user_id !== $client_user['ID'] ) {
				$_user = new MSAUser( $this->user_id );
				array_push( $recipent_list, $client_user['user_email'] );
			}
		}
		//It will always include Staff role mail – “unless he is the user performing the action
		$staff_users = $this->getStaffUsers();
		foreach ( $staff_users as $staff_user ) {
			if ( $this->user_id !== $staff_user->ID ) {
				array_push( $recipent_list, $staff_user->user_email );
			}
		}

		return $recipent_list;
	}

	public function newNoteNotificationStaff() {
		$body = "Added by user: " . $this->user->display_name;
		$body .= "<br>User Client: " . get_user_meta( $this->user_id, 'company', true );
		$body .= "<br>Bill ID:" . $this->external_id;
		$body .= "<br>Bill URL: " . $this->bill_url;
		$body . + "<br>Note Created At: " . $this->note_timestamp;

		$headers = array( 'Content-Type: text/html; charset=UTF-8', 'From: MainStreetAdvocates <info@msa.com>' );
		$subject = "New Note added on System " . date( "Y/m/d" );
		//get list of recepients that is all of staff members
		$sent_message = wp_mail( "ljubisa.dobric@live.com", $subject, $body, $headers );
	}

	public function save() {

	}
}

class MSAClient extends MSABase {

	public function getClientBills( $type ) {
		//show only non-hidden bills
		//show only bills that are approved
		//if type = legislation check if they have active session

	}
}

class MSAUser extends MSAClient {
	public $user_states = array();
	public $user_categories = array();
	public $user_keywords = array();
	public $bill_notes = array();

	public function __construct( $user_id = null ) {
		parent::__construct();
		$this->user_id   = ( is_null( $user_id ) ) ? get_current_user_id() : $user_id;
		$this->client_id = get_user_meta( $this->user_id, 'company', true );
		//  we will initialize settings as they are mandatory for most of actions
		$this->getUserSettings();
	}

	public function getUserSettings( $isfrontactive = 1, $ismailactive = 1, $return_object_settings = false ) {
		$settings = $this->wpdb->get_results( $this->wpdb->prepare(
			"SELECT id,type,category,isfrontactive,ismailactive 
                    FROM user_settings 
                    WHERE user_id = %s 
                    AND isfrontactive = %s
                    AND ismailactive = %s",
			$this->user_id,
			$isfrontactive,
			$ismailactive ),
			OBJECT );
		// sets internal settings
		foreach ( $settings as $setting ) {
			if ( $setting->type === 'state' ) {
				$this->user_states[ $setting->category ] = array(
					"isfrontactive" => $setting->isfrontactive,
					"ismailactive"  => $setting->ismailactive
				);
			} else if ( $setting->type === 'category' ) {
				$this->user_categories[ $setting->category ] = array(
					"isfrontactive" => $setting->isfrontactive,
					"ismailactive"  => $setting->ismailactive
				);
			} else if ( $setting->type === 'keyword' ) {
				$this->user_keywords[ $setting->category ] = array(
					"isfrontactive" => $setting->isfrontactive,
					"ismailactive"  => $setting->ismailactive
				);
			}
		}
		//returns objects that might needed for lists
		if ( $return_object_settings ) {
			return $settings;
		}
	}

	/**
	 *  User should see regulation documents that fulfill following requirement:
	 *  - regulation documents for parent clint
	 *  - regulation documents that don't have disabled category inside user_settings that is isfrontactive = 0
	 *  - regulation documents that don't have disabled state for particular user
	 */
	public function getRegulations( $federal = false ) {

	}

	public function RegulationsTable() {

	}
}
